Copying tests/userprog/multi-recurse into /tmp/PySXNM2OIG.dsk...
Writing command line to /tmp/CItNkWkkf2.dsk...
qemu -hda /tmp/CItNkWkkf2.dsk -hdb /tmp/TOpmzv6olK.dsk -hdc /tmp/PySXNM2OIG.dsk -m 4 -net none -nographic -monitor null
Kernel command line: -q -f put multi-recurse run 'multi-recurse 15'
Pintos booting with 4,088 kB RAM...
371 pages available in kernel pool.
371 pages available in user pool.
Calibrating timer...  419,020,800 loops/s.
hd0:0: detected 161 sector (80 kB) disk, model "QEMU HARDDISK", serial "QM00001"
hd0:1: detected 4,032 sector (1 MB) disk, model "QEMU HARDDISK", serial "QM00002"
hd1:0: detected 110 sector (55 kB) disk, model "QEMU HARDDISK", serial "QM00003"
Formatting file system...done.
Boot complete.
Putting 'multi-recurse' into the file system...
Executing 'multi-recurse 15':
Before child push back
After child push back
Before waiting in load_sema
Writing multi-recurse to stack
Writing 15 to stack
Put argv at addr 0xbfffffdc
Put argc at addr 0xbfffffd8
End of setup_stack()
*esp is 0xbfffffd4
stack contents:
bfffffd0              00 00 00 00-02 00 00 00 e0 ff ff bf |    ............|
bfffffe0  f2 ff ff bf ef ff ff bf-00 00 00 00 00 00 00 31 |...............1|
bffffff0  35 00 6d 75 6c 74 69 2d-72 65 63 75 72 73 65 00 |5.multi-recurse.|
c0000000  53 ff 00 f0 53 ff 00 f0-c3 e2 00 f0 53 ff 00 f0 |S...S.......S...|
c000000f	 	
c000000e	 	
c000000d	 	
c000000c	S	f000ff53	
--------------------------------------------------------------
c000000b	 	
c000000a	 	
c0000009	 	
c0000008	 	f000e2c3	
--------------------------------------------------------------
c0000007	 	
c0000006	 	
c0000005	 	
c0000004	S	f000ff53	
--------------------------------------------------------------
c0000003	 	
c0000002	 	
c0000001	 	
c0000000	S	f000ff53	
------- the border between KERNEL SPACE and USER SPACE -------
bfffffff	 	
bffffffe	e	
bffffffd	s	
bffffffc	r	657372	
--------------------------------------------------------------
bffffffb	u	
bffffffa	c	
bffffff9	e	
bffffff8	r	75636572	
--------------------------------------------------------------
bffffff7	-	
bffffff6	i	
bffffff5	t	
bffffff4	l	2d69746c	
--------------------------------------------------------------
bffffff3	u	
bffffff2	m	
bffffff1	 	
bffffff0	5	756d0035	
--------------------------------------------------------------
bfffffef	1	
bfffffee	 	
bfffffed	 	
bfffffec	 	31000000	
--------------------------------------------------------------
bfffffeb	 	
bfffffea	 	
bfffffe9	 	
bfffffe8	 	0	
--------------------------------------------------------------
bfffffe7	 	
bfffffe6	 	
bfffffe5	 	
bfffffe4	 	bfffffef	
--------------------------------------------------------------
bfffffe3	 	
bfffffe2	 	
bfffffe1	 	
bfffffe0	 	bffffff2	
--------------------------------------------------------------
bfffffdf	 	
bfffffde	 	
bfffffdd	 	
bfffffdc	 	bfffffe0	
--------------------------------------------------------------
bfffffdb	 	
bfffffda	 	
bfffffd9	 	
bfffffd8	 	2	
--------------------------------------------------------------
bfffffd7	 	
bfffffd6	 	
bfffffd5	 	
bfffffd4	 	0	
--------------------------------------------------------------
Before last line in start_process()
(multi-recurse) begin 15
(multi-recurse) exec("multi-recurse 14")
Syscall exec
Before child push back
After child push back
Before waiting in load_sema
Awoke from load_sema
End of process execute
In process_wait()
Waiting for child to terminate...
Writing multi-recurse to stack
Writing 14 to stack
Put argv at addr 0xbfffffdc
Put argc at addr 0xbfffffd8
End of setup_stack()
*esp is 0xbfffffd4
stack contents:
bfffffd0              00 00 00 00-02 00 00 00 e0 ff ff bf |    ............|
bfffffe0  f2 ff ff bf ef ff ff bf-00 00 00 00 00 00 00 31 |...............1|
bffffff0  34 00 6d 75 6c 74 69 2d-72 65 63 75 72 73 65 00 |4.multi-recurse.|
c0000000  53 ff 00 f0 53 ff 00 f0-c3 e2 00 f0 53 ff 00 f0 |S...S.......S...|
c000000f	 	
c000000e	 	
c000000d	 	
c000000c	S	f000ff53	
--------------------------------------------------------------
c000000b	 	
c000000a	 	
c0000009	 	
c0000008	 	f000e2c3	
--------------------------------------------------------------
c0000007	 	
c0000006	 	
c0000005	 	
c0000004	S	f000ff53	
--------------------------------------------------------------
c0000003	 	
c0000002	 	
c0000001	 	
c0000000	S	f000ff53	
------- the border between KERNEL SPACE and USER SPACE -------
bfffffff	 	
bffffffe	e	
bffffffd	s	
bffffffc	r	657372	
--------------------------------------------------------------
bffffffb	u	
bffffffa	c	
bffffff9	e	
bffffff8	r	75636572	
--------------------------------------------------------------
bffffff7	-	
bffffff6	i	
bffffff5	t	
bffffff4	l	2d69746c	
--------------------------------------------------------------
bffffff3	u	
bffffff2	m	
bffffff1	 	
bffffff0	4	756d0034	
--------------------------------------------------------------
bfffffef	1	
bfffffee	 	
bfffffed	 	
bfffffec	 	31000000	
--------------------------------------------------------------
bfffffeb	 	
bfffffea	 	
bfffffe9	 	
bfffffe8	 	0	
--------------------------------------------------------------
bfffffe7	 	
bfffffe6	 	
bfffffe5	 	
bfffffe4	 	bfffffef	
--------------------------------------------------------------
bfffffe3	 	
bfffffe2	 	
bfffffe1	 	
bfffffe0	 	bffffff2	
--------------------------------------------------------------
bfffffdf	 	
bfffffde	 	
bfffffdd	 	
bfffffdc	 	bfffffe0	
--------------------------------------------------------------
bfffffdb	 	
bfffffda	 	
bfffffd9	 	
bfffffd8	 	2	
--------------------------------------------------------------
bfffffd7	 	
bfffffd6	 	
bfffffd5	 	
bfffffd4	 	0	
--------------------------------------------------------------
Before last line in start_process()
(multi-recurse) begin 14
(multi-recurse) exec("multi-recurse 13")
Syscall exec
Before child push back
After child push back
Before waiting in load_sema
Awoke from load_sema
End of process execute
Syscall wait
In process_wait()
(multi-recurse) wait(exec("multi-recurse 14")) returned 0: FAILED
Syscall exit
multi-recurse: exit(1)
Start of process_exit()
After sema up in process_exit()
At end of process_exit()
Writing multi-recurse to stack
Writing 13 to stack
Put argv at addr 0xbfffffdc
Put argc at addr 0xbfffffd8
End of setup_stack()
*esp is 0xbfffffd4
stack contents:
bfffffd0              00 00 00 00-02 00 00 00 e0 ff ff bf |    ............|
bfffffe0  f2 ff ff bf ef ff ff bf-00 00 00 00 00 00 00 31 |...............1|
bffffff0  33 00 6d 75 6c 74 69 2d-72 65 63 75 72 73 65 00 |3.multi-recurse.|
c0000000  53 ff 00 f0 53 ff 00 f0-c3 e2 00 f0 53 ff 00 f0 |S...S.......S...|
c000000f	 	
c000000e	 	
c000000d	 	
c000000c	S	f000ff53	
--------------------------------------------------------------
c000000b	 	
c000000a	 	
c0000009	 	
c0000008	 	f000e2c3	
--------------------------------------------------------------
c0000007	 	
c0000006	 	
c0000005	 	
c0000004	S	f000ff53	
--------------------------------------------------------------
c0000003	 	
c0000002	 	
c0000001	 	
c0000000	S	f000ff53	
------- the border between KERNEL SPACE and USER SPACE -------
bfffffff	 	
bffffffe	e	
bffffffd	s	
bffffffc	r	657372	
--------------------------------------------------------------
bffffffb	u	
bffffffa	c	
bffffff9	e	
bffffff8	r	75636572	
--------------------------------------------------------------
bffffff7	-	
bffffff6	i	
bffffff5	t	
bffffff4	l	2d69746c	
--------------------------------------------------------------
bffffff3	u	
bffffff2	m	
bffffff1	 	
bffffff0	3	756d0033	
--------------------------------------------------------------
bfffffef	1	
bfffffee	 	
bfffffed	 	
bfffffec	 	31000000	
--------------------------------------------------------------
bfffffeb	 	
bfffffea	 	
bfffffe9	 	
bfffffe8	 	0	
--------------------------------------------------------------
bfffffe7	 	
bfffffe6	 	
bfffffe5	 	
bfffffe4	 	bfffffef	
--------------------------------------------------------------
bfffffe3	 	
bfffffe2	 	
bfffffe1	 	
bfffffe0	 	bffffff2	
--------------------------------------------------------------
bfffffdf	 	
bfffffde	 	
bfffffdd	 	
bfffffdc	 	bfffffe0	
--------------------------------------------------------------
bfffffdb	 	
bfffffda	 	
bfffffd9	 	
bfffffd8	 	2	
--------------------------------------------------------------
bfffffd7	 	
bfffffd6	 	
bfffffd5	 	
bfffffd4	 	0	
--------------------------------------------------------------
Execution of 'multi-recurse 15' complete.
Timer: 89 ticks
Thread: 32 idle ticks, 29 kernel ticks, 28 user ticks
hd0:0: 0 reads, 0 writes
hd0:1: 108 reads, 228 writes
hd1:0: 110 reads, 0 writes
Console: 8325 characters output
Keyboard: 0 keys pressed
Exception: 0 page faults
Powering off...
