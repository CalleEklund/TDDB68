----------------------------------------------------
NOTES TO KEEP TRACK OF PROGRESS, IDEAS, PROBLEMS EG.
----------------------------------------------------

--- 1/23/17 ---
Matildha:
Created git repo. Copied fhresh pintos files into it and commited, 
none of my previous changes to lab1 added yet. 
  Made all the tests in lab0 and added commands to .bashrc. Unsure if it works 
properly though. Added the tags to emacs and ran the alarm-single with and without gdb.
  
TODO: Try to understand what changes I made to lab1 and then transfer them into new 
project if seems correct. !DONE!

--- 1/27/17 ---
Matildha:
Changed the *esp pointer to PYSBASE - 12 and set process_wait() to infinite loop. 
   Much of what I did previously in lab1 seem to be kinda of wrong... 

--- 1/31/17 ---
Matildha:
Copied old halt() function to present. 
   
TODO: Should all syscall functions be declared static? 

--- 2/1/17 ---
Matildha:
Create file function seems to work. Does not test arguments. 
   Found useful read and write operations in file.c. (good filename lol)

Added nr_open_files to 'struct thread' and pointer to dynamically allocated array for file descriptor table - which consists of 'struct file*' pointers. Failed to allocate array in thread_init() since #ifdef USERPROG made it unavaiable.
   Wrote something quick in syscall, a function callled init_fd_table that allocates the array and sets nr_open_files to 0. Not finished, not tested. 
TODO: Try to initialize fd_table and nr_open_files in syscall.c. 

--- 2/2/17 ---
Matildha:
You are allowed to put fd_table array i thread struct. Set all elements to NULL in thread_init. 
  Succeeded to open a file and put it at the first position in the fd_table. Added max_nr_open_files in thread struct. 
TODO: Should this be constant? HOW?
TODO: Fix get_new_fd() to handle several open calls.

--- 2/3/17 ---
Matildha & Dominique:
We have done the write and close functions, the write function is tested and seems to work. We moved initialasion of thread struct variables to init_thread instead of thread_init. 

--- 2/7/17 --- 
Matildha & Dominique:
Done write and read functions, works both from files and from console. Haven't confirmed that read works from keyboard. 
TODO: Unsure what/how to test?
  Close seems to work, at least for a single open file. 

PROBLEM: Can't have 2 open files at the same time. First open call fails if there is a second open call afterwards. Close in between don't matter. 

-- 2/7/17 ---
Matildha:
Wrote skeleton for switch statement in syscall handler. Created a custom test in examples. Is going to test create which is the only case with function call in handler.
TODO: Fix compilation errors and test the create syscall. (Does retreiving of arguments work as I've written it nowb?)

--- 2/8/17 ---
Matildha:
Finished switch statement with call to all out functions. Created a function get_args() which puts the right number of arguments into an array allocated in syscall_handler. Create, write and open and exit seems to work. Not tested halt yet. 
   I thiiiink the problem with opening 2 files did not appear to be a problem when running lab1test. 
PROBLEM: Read from console deos however NOT work with lab1test. I can't currently rule out that it's because of the ssh x11 connection i used in doing the test. 
TODO: Test lab1test from school pc.  

--- 2/9/17 ---
Dominique & Matildha:
Passed the lab1test. Fixed the problems when reading on the console. Adding the validate_fd function into several other functions. Closed the files that the user did not close in exit(). 

--- 13/2/17 ---
Matildha:

STARTING LAB 2:

thread_block() puts thread to sleep, used through synch module primitives. 

Use list_insert_ordered() ? - impossible when using semaphores. They called push-back and pop_front directly. 

--- 14/2/17 ---
Matildha & Dominique: 
Created the sleep_queue and sleep_sema inside thread.c. And a list in timer.c to hold structs which keep track of time of ticks a certain process wants to sleep and the starting time for the sleep. Items in this list should be inserted with list_insert_ordered. 

TODO: Create the comparator function for the insert_ordered. Add code in timer_interrupt(). 
TODO: list_entry?????? 

--- 14/2/17 ---
Matildha: 
Free p_sleep_time struct after sema_down in timer_sleep(). Free the same struct right after. 

We will probably need a local semaphore for management of the  tick_list!! 

I DO BELIEVE our tick_list is our ACTUAL SLEEP_QUEUE!!!!!!!!!!!!!! 

timer_ticks() protects ticks variable by disabling and reenabling interrupts... NOT using any lock or semaphore?? Would we be allowed to do this as well? 
  - Yes, inside timer_interrupt() right? Cuz we can't call sema_down inside an interrupt handler!? 

-- 15/2/17 ---
Matildha and Dominique 
Finish the timer_interrupt function. Fix several compilations errors left from passed sessions. We followed the teacher's recommendation regarding lab 1. 
TODO : protect tick_list. create small test? otherwise start real tests. 

--- 16/2/17 ---
M & D:
Started to debug lab2. Commented everythings we've added line by line until only the busyloop remained. We put a print and a division by 0 in timer_sleep and didn't get a print or error when running alarm-single. 
TODO: WHY???? 

Store semaphores that are unique for each process in the sleep_queue!! 

--- 17/2/17 ---
M & D:
Moved sleep_sema and its queue into timer.c. Debugged this. 
TODO: (Branch the solution with 1 semaphore) and then continue seperately on one semaphore for each process. 

--- 18/2/17 ---
M:
I think I got lab2 to work!! Passed all the tests. Didn't run them more then once or twice with my final solution though, so might want to do that, since it was so inconsistent before when testing (getting different results with me not changing any code). 

TODO: Clean up code, remove prints and remove thread pid from our p_time_sleep struct. 

TODO: Check for mem leaks? 

--- 19/2/17 ---
M: 
Extracted code in timer_interrupt into a recursive function. (kept all old things commented). And REMOVED disable interrupt protection around the editing of the list in timer_interrupt. 
  Ran every test several times, succesful. Thereby the enabling of interrupts do not seem to have had an impact. Bare in mind though! 
TODO: Same as last log. 
TODO: Bad with recursion in the timer_interrupt? Takes longer time?? 

--- 20/2/17 ---
M&D:
Does child process inherit file descriptors??

is_user_vaddr() in vaddr.h

--- 21/2/17 ---
M:
"Alive counting to decide who should free dynamically allocated memory" ?

From pintos doc: "Currently, process_execute() does not support passing arguments to new processes. Implement this functionality, by extending process_execute() so that instead of simply taking a program file name as its argument, it divides it into words at spaces."

TODO: How does our exec syscall know if the program was LOADED succesfully???

--- 2/3/17 ---
M&D:

TODO: Access to exit status when no call to wait?
Working on part A of lab 3. We worked on the exec(), exit() and wait() functions in syscall.  
We initialised the children and parent lists in thread_init and process_execute. We also added the load lock in start_process and process_execute. We initialised the parent to NULL in the init_thread for the main process that does not have any parent. 
We added a for loop in process_wait() to go through all children and wait if the child has not already terminated(protected by a lock). 
We changed the wait_lock and load_lock to semaphores. 

--- 3/3/17 ---
M&D:

Wrote all code of part A of lab 3 without any test done. Start of part B, we added args and argc in both struct (thread and new_proc_args). We changed the line with PHYSBASE -12. We change the name of the parameter in process_execute to be cmd_line. We split the cmd_line into arguments and the file_name and stored them into the struct new_proc_args. 

TODO : transfer the args and argc in the thread struct (in start_process).
TODO2 : put them on the stack. 

--- 4/3/17 ---
M:

Need to palloc_get_page for strlcpy??
Is it possible the parent parent_child struct is destroyed when thread_exit (the part we've not written?) 
"palloc_free_page (file_name);" L118 process.c Ok?? Risk of being freed twice? 

Have to make sure children list has been init before calling exit. " If thread_start() has been called, then the new thread may be
   scheduled before thread_create() returns.  It could even exit
   before thread_create() returns."
Or not a problem if can't run (can't exit) until put into ready queue? 

Changed how the loop to extract args from CMD_LINE. 

Added all things to the stack in setup_stack(). Changed the name of the char*[32] new_proc_args to argv. And the type was wrong before. In thread struct has to be char** so we can modify it. Ok? 

TODO: How can we free shared rescources when child terminates abnormally? Is thread_exit still called??? 

--- 5/3/17 ---
M:

Something is wrong with the wait_sema. When called (by kernel thread?) in process_exit() the list_begin fails. Page fault reading page in user context. 

TODO: Have to change how do mod 4. I understood that the wrong way. (hmm... no might be ok as it is....) 

I think we should use memcpy() to put things on stack properly. 

Ok, so i didn't realize (DESPITE STARING MYSELF BLIND ON THE STACK PICS) that the file name also should be on the stack. 
TODO: Fix that and add the last null element in argv somewhere. 

--- 6/3/2017 ---
M:

Added missing cases in syscall_handler (-___-')... And changed where args are extracted from cmd_line. Did extra palloc with the filename in start_process. Now only pointer to the pr_args struct is stored in thread.
   I think things are stored properly on stack now, no longer get page faults at every test. 
TODO: Add condition whether to print debug. 

Test wait-twice fails. Gives wrong exit status I think. 

So the parameter of syscall wait() is strange. When running wait-twice and wait-once we only ever get pid 0. I made a custom test and only wait (without calling exec) and we get that pid through allright. 
   Do we mess up the stack somehow so we can't get the real pid?  

FIXED IT!!!!! .......... didn't set return value in syscall_handler..... shoot me.... 

Test wait-killed failed. Cause we put new thread into children list even though it failed to load!! Then we wait for it and match -1 to -1. Badillibad. 
TODO: Fix this!






